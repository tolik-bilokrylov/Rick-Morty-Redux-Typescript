{"version":3,"sources":["store/characters.ts","components/Characters/CharacterModal.tsx","components/Characters/CharacterCard.tsx","components/Characters/CharactersPagination.tsx","components/Loader/Loader.tsx","components/Characters/CharactersList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["SET_CHARACTERS","SET_PAGES_INFO","SET_CURRENT_PAGE","fetchCharacters","setIsLoading","currentPage","dispatch","axios","get","then","response","characters","pageInfo","result","data","results","type","payload","info","console","log","initialState","count","pages","next","prev","reducer","state","action","CharacterModal","modalActive","setModalActive","character","name","image","status","species","gender","location","className","onClick","element","stopPropagation","src","alt","useStyles","makeStyles","root","maxWidth","textAlign","media","width","height","CharacterCard","classes","useState","id","Card","CardMedia","title","CardContent","Typography","gutterBottom","variant","component","theme","createStyles","marginTop","spacing","PaginationCharacters","useSelector","useDispatch","React","page","setPage","Pagination","onChange","event","value","size","Loader","CharactersList","isLoading","useEffect","map","App","rootReducer","combineReducers","charactersReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40d9f40a.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { CharacterType, RootStateCharacters, CharactersFullInfo, CharacterInfo } from '../types';\n\n// Action types\nconst SET_CHARACTERS = \"SET_CHARACTERS\";\nconst SET_PAGES_INFO = \"SET_PAGES\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\n\n\n// Action creators\nexport const setCharacters = (characters: CharacterType[]) => ({ type: SET_CHARACTERS, payload: characters });\nexport const setPageInfo = (pageInfo: CharacterInfo) => ({ type: SET_PAGES_INFO, payload: pageInfo });\nexport const setCurrentPage = (currentPage: number) => ({ type: SET_CURRENT_PAGE, payload: currentPage });\n\n\nexport const fetchCharacters = (\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  currentPage: number\n) => {\n  return (dispatch: Dispatch) => {\n    setIsLoading(true);\n    axios.get<CharactersFullInfo>(`https://rickandmortyapi.com/api/character/?page=${currentPage}`)\n      .then(response => {\n        const result = response.data\n        dispatch(setCharacters(result.results));\n        dispatch(setPageInfo(result.info));\n        setIsLoading(false);\n        console.log(result.info)\n      })\n  }\n};\n\nconst initialState: RootStateCharacters = {\n  characters: [],\n  pageInfo: {\n    count: 671,\n    pages: 34,\n    next: \"\" || null,\n    prev: \"\" || null\n  },\n  currentPage: 1,\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_CHARACTERS:\n      return {\n        ...state,\n        characters: action.payload\n      };\n    case SET_PAGES_INFO:\n      return {\n        ...state,\n        pageInfo: action.payload\n      };\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport { CharacterModalType } from '../../types';\n\nexport const CharacterModal: React.FC<CharacterModalType> = ({ modalActive, setModalActive, character }) => {\n  const { name, image, status, species, type, gender, location } = character;\n\n  return (\n    <div\n      className={modalActive ? \"character__modal character__modal--active\" : \"character__modal\"}\n      onClick={() => setModalActive(false)}\n    >\n      <div\n        className={modalActive ? \"character__content character__content--active\" : \"character__content\"}\n        onClick={element => element.stopPropagation()}\n      >\n        <img src={image} alt=\"character\" />\n        <h1 className=\"character__tittle\">{name}</h1>\n        <p className={status === \"Alive\" ? \"character__full character__full--norm\" : \"character__full character__full--bad\"}>\n          Status:&nbsp;\n          {status}\n        </p>\n        <p className=\"character__full\">\n          Species:&nbsp;\n          {species}\n        </p>\n        <p className=\"character__full\">\n          {type}\n        </p>\n        <p className=\"character__full\">\n          Gender:&nbsp;\n          {gender}\n        </p>\n        <p className=\"character__full\">\n          Location:&nbsp;\n          {location.name}\n        </p>\n      </div>\n    </div>\n  )\n};","import React, { useState } from 'react';\nimport { CharacterType } from '../../types';\nimport { CharacterModal } from './CharacterModal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n    textAlign: 'center'\n  },\n  media: {\n    width: 304,\n    height: 300,\n  },\n});\n\n\nexport const CharacterCard: React.FC<{ character: CharacterType }> = ({ character }) => {\n  const classes = useStyles();\n  const [modalActive, setModalActive] = useState(false);\n  const { id, name, image } = character;\n\n  return (\n    <>\n      <Card\n        className={classes.root}\n        key={id}\n        onClick={() => setModalActive(true)}\n      >\n        <CardMedia\n          className={classes.media}\n          image={image}\n          title=\"character\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n        </CardContent>\n      </Card>\n      <CharacterModal\n        modalActive={modalActive}\n        setModalActive={setModalActive}\n        character={character}\n      />\n    </>\n  )\n};","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCurrentPage } from \"../../store/characters\";\nimport { RootState } from \"../../store/index\";\nimport Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      '& > * + *': {\n        marginTop: theme.spacing(4),\n      },\n    },\n  }),\n);\n\nexport function PaginationCharacters() {\n  const pageInfo = useSelector((state: RootState) => state.characters.pageInfo);\n  const dispatch = useDispatch();\n\n  const { pages } = pageInfo;\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(1);\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n\n  };\n\n  dispatch(setCurrentPage(page));\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Pagination count={pages} page={page} onChange={handleChange} size=\"large\" />\n      </div>\n    </>\n  )\n}\n\n","import React from 'react';\nimport \"./Loader.scss\";\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n)\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchCharacters } from \"../../store/characters\";\nimport { RootState } from \"../../store/index\";\nimport { CharacterType } from \"../../types\";\nimport { CharacterCard } from \"./CharacterCard\";\nimport { PaginationCharacters } from \"./CharactersPagination\";\nimport { Loader } from \"../Loader/Loader\";\nimport \"./CharactersList.scss\";\n\n\nexport const CharactersList = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const characters = useSelector((state: RootState) => state.characters.characters);\n  const currentPage = useSelector((state: RootState) => state.characters.currentPage);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchCharacters(setIsLoading, currentPage));\n  }, [dispatch, currentPage]);\n\n  // const filtredPost = useMemo(() => {\n  //   let postsCopy = [...posts];\n  //   if (postsCopy.length > 0 && activeUserId) {\n  //     postsCopy = postsCopy.filter((post) => post.userId === activeUserId);\n  //   }\n\n  //   return postsCopy;\n  // }, [posts, activeUserId]);\n\n  return (\n    <div className=\"field\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"character\">\n          {characters.map((character: CharacterType) => (\n            <CharacterCard\n              character={character}\n              key={character.id}\n            />\n          ))}\n        </div>\n      )}\n      <div className=\"footer\">\n        <PaginationCharacters />\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { CharactersList } from './components/Characters/CharactersList';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CharactersList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport charactersReducer from \"./characters\";\n\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getCharactersSelector = (state: RootState) => state.characters.characters;\nexport const getCurrentPageSelector = (state: RootState) => state.characters.currentPage;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));"],"sourceRoot":""}